{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","spacing","marginBottom","transition","link","&:hover > div","background","boxShadow","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","Container","maxWidth","style","CssBaseline","c","_useState","useState","_useState2","Object","slicedToArray","Gtihub","getGithub","useEffect","fetch","then","res","json","map","git","e","Link","key","id","href","html_url","className","underline","Paper","Typography","variant","component","gutterBottom","name","p","description","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAMMA,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAASF,EAAMG,QAAQ,GACvBC,aAAc,EACdC,WAAY,SAEdC,KAAM,CACJC,gBAAiB,CACfC,WAAY,OACZC,UACE,4GCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iFCTNC,IAASC,OACPC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,SAAS,KAAKC,MAAO,CAAEpB,QAAS,UACzCe,EAAAC,EAAAC,cAACI,EAAA,EAAD,MACAN,EAAAC,EAAAC,cFSW,WACb,IAAMK,EAAI1B,IADyB2B,EAEPC,mBAAS,IAFFC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE5BK,EAF4BH,EAAA,GAEpBI,EAFoBJ,EAAA,GAUnC,OANAK,oBAAU,WACRC,MAAK,2DACFC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GAAG,OAAIJ,EAAUI,MACxB,IAEIL,EAAOO,IAAI,SAAAC,GAAG,OACnBC,wBACEC,IACA,CAAEC,IAAKH,EAAII,GAAIC,KAAML,EAAIM,SAAUC,UAAWrB,EAAElB,KAAMwC,UAAW,QACjEP,wBACEQ,IACA,CAAEF,UAAWrB,EAAEvB,MACfsC,wBAAES,IAAY,CAAEC,QAAS,KAAMC,UAAW,KAAMC,cAAc,GAAQb,EAAIc,MAC1Eb,wBAAES,IAAY,CAAEC,QAAS,YAAaC,UAAW,IAAKL,UAAWrB,EAAE6B,GAAKf,EAAIgB,kBE3BhF,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.1151d12e.chunk.js","sourcesContent":["import React, { Fragment as f, createElement as e, useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(2),\n    marginBottom: 8,\n    transition: '0.35s'\n  },\n  link: {\n    '&:hover > div': {\n      background: '#eee',\n      boxShadow:\n        '0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12)'\n    }\n  }\n}));\n\nexport default function PaperSheet() {\n  const c = useStyles();\n  const [Gtihub, getGithub] = useState([]);\n\n  useEffect(() => {\n    fetch(`https://api.github.com/users/ouweiya/repos?sort=updated`)\n      .then(res => res.json())\n      .then(res => getGithub(res));\n  }, []);\n\n  return Gtihub.map(git =>\n    e(\n      Link,\n      { key: git.id, href: git.html_url, className: c.link, underline: 'none' },\n      e(\n        Paper,\n        { className: c.root },\n        e(Typography, { variant: 'h5', component: 'h3', gutterBottom: true }, git.name),\n        e(Typography, { variant: 'subtitle1', component: 'p', className: c.p }, git.description)\n      )\n    )\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie9\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\n\nReactDOM.render(\n  <Container maxWidth=\"md\" style={{ padding: \"8px 0\" }}>\n    <CssBaseline />\n    <App />\n  </Container>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n\n\n\n\n"],"sourceRoot":""}